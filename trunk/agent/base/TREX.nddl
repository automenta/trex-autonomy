
// Declare enumeration for Token States
enum TokenStates {INACTIVE, ACTIVE, MERGED, REJECTED}


// Declare built in constraints used for common TREX use cases

constraint default(var, value) { var <: numeric && value <: numeric }
constraint defaultOnCommit(var, value) { var <: numeric && value <: numeric }
constraint assertCompleted(s) { s <: TokenStates }
constraint assertRejected(s) { s <: TokenStates }


// Declare a marker class to indicate the base class should be a Timeline
// which enforces a total order. This should only arise where we
// have predicates!
class Timeline {}

/**
 * This global constant will be set when a deliberative reactor is loaded
 */
int missionEnd;

enum Mode {
	External, 	// Synchronize observations.
	Internal, 	// Publish updates at the current tick
	Ignore		// Not synchronized at all
}

class AgentTimeline extends Timeline {
	Mode mode;
	string defaultPredicate;

	/**
	 * A predicate to reflect that the timeline is undefined. Used to fill gaps
	 * where they occur.
	 */
	predicate undefined{};

	/**
	 * A predicate which is used to block any successor states for a timeline
         */
	predicate Terminated{concurrent(end, missionEnd);}

	AgentTimeline(Mode _mode){
		mode = _mode;
		defaultPredicate = "undefined";
	}

	AgentTimeline(Mode _mode, string _defaultPredicate){
		mode = _mode;
		defaultPredicate = _defaultPredicate;
	}
}

/**
 * Base class for actions. These will never be exchanged across reactors and are generated to
 * accomplisg goals. This is a construct of a deliberative reactor
 */
class AgentActions {
	AgentActions(){}
}

class StateVariable extends AgentTimeline{
 	predicate Holds{ eq(duration,1); }
 	StateVariable(Mode _mode){super(_mode);}
	StateVariable(Mode _mode, string _defaultPredicate){super(_mode, _defaultPredicate);}
}