/**
 * Model for testing trex extensions for execution
 */
#include "TREX.nddl"


class StatusTimeline extends AgentTimeline {
  predicate Succeded{}
  predicate Preempted{}
  predicate Aborted{}
  StatusTimeline(){ super(Internal); }
};

class TestBehavior extends Behavior {
  TestBehavior() { super(Internal); }
};

TestBehavior::Active{
  duration == 2;

  // This should be legal
  isEnded(this.object) == isStarted(this.object);

  // If the duration bounds have been exceeded, then we should be timed out.
  if(duration > max_duration){
    isTimedOut(this.object) == true;
    meets(Inactive s);
    eq(s.status, PREEMPTED);
  }

  if(isSucceded(this.object)){
    meets(StatusTimeline.Succeded);
  }

  if(isPreempted(this.object)){
    meets(StatusTimeline.Preempted);
  }

  if(isAborted(this.object)){
    meets(StatusTimeline.Aborted);
  }
}

TestBehavior::Inactive{
  met_by(Active p);

  if(status == SUCCESS){
    isSucceded(p.object) == true;
    isPreempted(p.object) == false;
    isAborted(p.object) == false;
  }

  if(status == PREEMPTED){
    isSucceded(p.object) == false;
    isPreempted(p.object) == true;
    isAborted(p.object) == false;
  }

  if(status == ABORTED){
    isSucceded(p.object) == false;
    isPreempted(p.object) == false;
    isAborted(p.object) == true;
  }

  // Force a failure if it starts to early
  if(isEnded(p.object)){
    if(status == SUCCESS){
      if(start < 25){
	if(start > 20){
	  true == false;
	}
      }
    }
  }
}

StatusTimeline status_timeline = new StatusTimeline();
TestBehavior test_behavior = new TestBehavior();
close();

fact(status_timeline.undefined);
fact(test_behavior.Inactive);

// A goal that should be timed out.
rejectable(test_behavior.Active g0);
g0.max_duration = 1;
g0.start = 1;
isTimedOut(g0.object) == true;
isPreempted(g0.object) == true;

// A goal that should succeed
rejectable(test_behavior.Inactive g1);
g1.status = SUCCESS;
g1.start = 10;

// A goal that should be aborted
rejectable(test_behavior.Inactive g2);
g2.status = ABORTED;
g2.start =13;

// A goal that should be preempted
rejectable(test_behavior.Inactive g3);
g3.status = PREEMPTED;
g3.start = 18;

// A goal that should fail first, and then recover
rejectable(test_behavior.Inactive g4);
g4.status = SUCCESS;
g4.start > 20;

// Adding this active goal at the end will introduce re-planning when g4 fails initially
rejectable(test_behavior.Active g5);
g5.max_duration = 1;

g4 before g5;
