#summary TREX provides several tools which can be used to help developers create and debug TREX applications.

<wiki:toc max_depth="2" />

= Command Line Tools =
A set of command line tools are available once the proper configuration variables have been set up in the environment. If you followed the installation and environment setup steps in the [GetStarted Getting Started] guide you are almost there. You should also make sure that the bin directory of your working package is in the path.
{{{
export PATH=`rospack find your_working_package`/bin:$PATH
}}}

For some of these tools to work, the package must be built.
{{{
roscd your_working_package
make
}}}

The project will be build automatically for you if you use the *trexcreate* utility.
== trexcreate ==
This utility will create an initial ROS package set up to use TREX. It will create a standard directory structure, and include all of the appropriate build and configuration files.

{{{
Usage:  trexcreate package_name  [--help] [--deps pkg1 pkg2 pkg3]
	package_name The ROS package name for the executive
	--deps a b c Optional ROS package dependencies of the package. In this example - a, b and c.
	--help       Produces this menu.

}}}

In this case we assume the following package has been created:
{{{
trexcreate demo
}}}
If successful, this utilty will create a child directory of the current directory named *package_name* with the following:
 * [http://www.ros.org/wiki/Manifest manifest.xml] - A manifest file expected by ROS to delcare the new package.
 * [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/CMakeLists.txt CMakeLists.txt] - A cmake file expected by ROS that will declare binaries for _trexfast_, _trexdebug_, and _trexparse_.
 * src - A directory for source files. This directory will contain:
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/src/trex_create_template_components.cpp demo_components.cpp] - A placeholder for any custom components you might wish to integrate in order to extend the capabilities of the executive
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/src/temp_init_gen_demo.cpp temp_init_gen_demo.cpp] - A generated file providing a definition for a standard initialization package provided for all trex application packages.
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/src/temp_reg_gen.cpp temp_reg_gen.cpp] - A generated registartion file providing a registration function used in all trex application packages.
 * includes/package_name - A directory for include files
 * nddl - A directory for NDDL model files. This directory includes a strawman model ([https://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/nddl/demo.nddl demo.nddl]) to get you started:
 * cfg - A directory for T-REX agent configuration files.  To get started, this directory contains [https://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/cfg/demo.cfg demo.cfg] which provides a 2-reactor configuration.
 * test - A directory for test cases. A sample test case is provided. It includes:
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/trex_config.launch trex_config.launch] - A ROS launch file used to set TREX parameters. These will be used when running the executive.
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/demo/demo.client.nddl demo/demo.client.nddl]
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/demo/demo.server.nddl demo/demo.server.nddl]
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/demo/demo.test demo/demo.test]
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/demo/demo.valid demo/demo.valid]

On creation of a package, you must build it:
{{{
rosmake package_name
}}}

The files listed here are part of the Hello World tutorials to create and run a simple executive.
== trexparse ==
This utility will parse a given input NDDL file to check for errors.

*Usage:*
{{{
trexparse input_file [--start-dir==some-start-directory]
}}}
== trexfind ==
This utility will search the trex-path for the first occurrence of a given file.

*Usage:*
{{{
trexfind file_name [some-start-directory]
}}}
== trexdepends ==
This utility will search for all the files included by a target file. The system will try to autodetect the package name. Adding -q will prevent the display of error messages.

*Usage:*
{{{
trexdepends input_file [package_name] [-q]
}}}
== trexfast / trexdebug ==
There are 2 variations of this same utility. Each will run the executive. *trexfast* is a highly optimized version and *trexdebug* is a much slower version which will have alot of useful debug checking code that can be very handy when diagnosing problems. We will explain this for *trexfast*, but the same applies for *trexdebug*
== trexmonitor ==