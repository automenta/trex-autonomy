#summary  In this tutorial you will create a project called _demo_ and execute a test case. You will learn about the main artifacts and structure of a T-REX project.
=Create the project=
Create a working directory called trex_tutorials:
{{{
mkdir trex_tutorials
cd trex_tutorials
}}}
We will assume this is the working directory for remaining tutorials. Add this directory to the ROS_PACKAGE_PATH, if it is not already included:
{{{
ROS_PACKAGE_PATH=`pwd`:ROS_PACKAGE_PATH
}}}
Create a project called *demo* using [Tutorials#trexcreate trexcreate]:
{{{
trexcreate demo
}}}
This will create a child directory of the current directory named *demo* with the following:
 * [http://www.ros.org/wiki/Manifest manifest.xml] - A manifest file expected by ROS to delcare the new package.
 * [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/CMakeLists.txt CMakeLists.txt] - A cmake file expected by ROS that will declare binaries required for _trexrun_ and _trexparse_.
 * [NddlConfig temp_nddl_gen.cfg] - A NDDL configuration file used to set paths for file search, and binding implementation code to NDDL base classes.
 * src - A directory for source files. This directory will contain:
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/src/trex_create_template_components.cpp demo_components.cpp] - A placeholder for any custom components you might wish to integrate in order to extend the capabilities of the executive
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/src/temp_init_gen_demo.cpp temp_init_gen_demo.cpp] - A generated file providing a definition for a standard initialization package provided for all trex application packages.
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/src/temp_reg_gen.cpp temp_reg_gen.cpp] - A generated registartion file providing a registration function used in all trex application packages.
 * includes/package_name - A directory for include files
 * nddl - A directory for NDDL model files. This directory includes a strawman model ([https://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/nddl/demo.nddl demo.nddl]) to get you started:
 * cfg - A directory for T-REX agent configuration files.  To get started, this directory contains:
  ** [https://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/cfg/demo.cfg demo.cfg] which provides a 2-reactor configuration.
  ** [https://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/cfg/debug.cfg debug.cfg] which is used to set debug logging levels for T-REX.
 * test - A directory for test cases. A sample test case is provided. It includes:
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/trex_config.launch trex_config.launch] - A ROS launch file used to set T-REX parameters. These will be used when running the executive.
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/demo/demo.client.nddl demo/demo.client.nddl] - The input nddl file for the *client* reactor of the *demo* agent.
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/demo/demo.server.nddl demo/demo.server.nddl] - The input nddl file for the *server* reactor of the *demo* agent.
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/demo/demo.test demo/demo.test] - A roslaunch file suitable for launching a roscore with required parameters and for use with rostest.
  ** [http://code.ros.org/svn/wg-ros-pkg/trunk/stacks/trex/trex_core/trex_create_template/test/demo/demo.valid demo/demo.valid] - An event log populated with expected output as timeline changes are requested and as they are expected to occur. This is used as part of the regression testing framework.

Some [Tools command line tools] require your new package to be built. To build the new project:
{{{
rosmake demo
}}}
=Test the new project=
You can verify that the project is working correctly by running a test case that is generated as part of a skeleton test harness for you:
{{{
roscd demo
make test
}}}
You should see output terminating with an indication of success such as:
{{{
[AGGREGATED TEST RESULTS SUMMARY]

PACKAGES: 
 * demo


SUMMARY
 * RESULT: SUCCESS
 * TESTS: 3
 * ERRORS: 0
 * FAILURES: 0
}}}
You should also be able to apply [Tools command line tools] now that your package has been built. To find the configuration file `demo.cfg`:
{{{
trexfind demo.cfg
}}}
A success should generate the fully qualified path to the requested file. For example:
{{{
/u/mcgann/ros/ros-pkg/trex_tutorials/demo/cfg/demo.cfg
}}}
[Tools#trexdepends trexdepends] can be used to get all the included nddl files for a given nddl target. if you type:
{{{
trexdepends test/demo/demo.client.nddl
}}}
You will see that this input file depends on a number of nddl files in this package and other packages:
{{{
/u/mcgann/ros/ros-pkg/wg-ros-pkg/stacks/trex/trex_core/TREX/agent/base/TREX.nddl
/u/mcgann/ros/ros-pkg/trex_tutorials/demo/nddl/demo.nddl
/wg/adw/mcgann/ros/ros-pkg/trex_tutorials/demo/test/demo/demo.client.nddl
}}}
=Inspect output=
There are a number of ways to see what is going on inside the executive. One of them is the [TrexLog TREX.log] which is generated anew on every run. All executive log data is oupt to a directory designated by the TREX_LOG_DIR environment variable. This variable can also be set by the ros parameter trex/log_dir. It is this mechanism that is used on the project structure you have just created.

Open up the trex_config.launch file provided to see how trex configuration parameters are set:
{{{
roscd demo
cat test/trex_config.launch
}}}
You will see something like:
{{{
<launch>
  <!-- Automatically start roscore /-->
  <master auto="start"/>

  <!-- TREX Parameters /-->
  <param name="/trex/update_rate" value="10"/>
  <param name="/trex/path" value="$(find demo)/cfg:$(find trex_ros)/cfg"/>
  <param name="/trex/log_dir" value="$(find demo)/logs"/>
  <param name="/trex/play_back" value="0"/>
  <param name="/trex/time_limit" value="0"/>
  <param name="/trex/input_file" value="demo.cfg"/>
</launch>
}}}
Every time TREX executes, it creates a new working directory in the TREX_LOG_DIR. The current active directory is soft linked to *latest*. To inspect the log file generated:
{{{
cat logs/latest/TREX.log
}}}
Which should produce output of the form:
{{{
[0]ON hello ASSERT HelloWorldTimeline.Goodbye{}
[server][1]Request received: globalToken_0:HelloWorldTimeline.Hello(29)
[5]ON hello ASSERT HelloWorldTimeline.Hello{}
[server][7]Request received: HelloWorldTimeline.Goodbye(114)
[7]ON hello ASSERT HelloWorldTimeline.Goodbye{}
}}}
This log file tells you that:
 * At tick 0, the hello timeline has the value GoodBye
 * At tick 1, the server reactor received a request to transition the hello timeline to the value token of type Hello.
 * At tick 5, the hello timeline transitions to the requested value.
 * At tick 7, a second request is made, this time to transition to Goodby. This transition occurs within the same tick.