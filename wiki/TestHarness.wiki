#summary This describes the regression testing pattern provided by TREX

= Introduction =

= Details =
== Running Tests ==

== Success Criteria ==
A TREX test succeeds if three conditions are met:
 # *The `Agent` completes it's mission.*
 # *The `Agent`'s `EventLog` is identical to the stored `EventLog`.*
 # *The `TestMonitor` observes that all NDDL asserts were met.*

The first condition is required so that the execution completes at all. The second condition ensures that the execution completed in the same way that it did when it was known to work. The third condition allows additional test criteria to be specified in NDDL.

=== EventLog ===
The `EventLog` captures the sequence of interactions (events) between reactors. One EventLog is compared to another by a simple string comparison. The strings are generated by the call:
{{{
TREX::Agent::toString(TREX::Agent::instance()->getEventLog())
}}}

Each line of this generated string follows the space-delimited format:
{{{
[Tick] [Event Type] [Object Name] [Predicate Name]
}}}

Currently, the `EventLog` captures three event types:
 * *NOTIFY* Occurs when a reactor posts an observation. The `Agent` will route the observation to all reactors who track the observation timeline.
 * *REQUEST* Occurs when a requested goal is sent to a reactor.
 * *RECALL* Occurs when a requested goal is recalled from a reactor.

=== TestMonitor ===
==== Usage in NDDL ====
{{{
assertCompleted(tokenLabel.predicate);
assertRejected(tokenLabel.predicate);
}}}
==== Usage in C++ Test Client ====
{{{
TREX::TestMonitor::reset();
assertTrue(TREX::TestMonitor::success(), TREX::TestMonitor::toString().c_str());
}}}

= Creating New Tests =
=== Enabling Logging in TREX::Agent ===
This is currently done automatically. The `TREX::Agent` constructor defaults `enableLogging` to `true`.