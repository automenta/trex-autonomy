#summary Describes the application of a divide-and-conquer strategy to T-REX for scaling planning centric approaches to complex systems.

= Divide And Conquer =
One of the main criticisms of control systems based on _Sense-Plan-Act_ is that they are too slow, because planning is too slow. Thus, planning can only be applied to higher levels of an agent architecture where it can deliberate at length over how best to achieve high-level goals, and then send the plan off to an executive for execution. The executive will not plan, and so it can be much faster. However, the executive must now be programmed by hand to properly decompose higher-level plans into lower-level commands. 

A key idea behind T-REX is that an agent is not just a single monolithic controller. In practice, it is both feasible and desirable to break up the control structure into a collection of semi-independent control loops, each with it's own internal SPA cycle. Intuitively, this is feasible in many applications because:
 * Typically planning over long time horizons occurs at a relatively coarse level of abstraction, and can be conducted over relatively long periods of time (perhaps minutes). Many details of agent state can be ignored.
 * Planning for lower levels of detail is generally conducted over much shorter time horizons. Moreover, it is often the case that a relatively small set of the total agent state is relevant to the local planning problem.

In T-REX terminology, this means that the agent control structure can be divided into a collection of Teleo-Reactors where each one is configured with a different _functional scope_ (i.e. the set of timelines it considers) and _temporal scope_ (i.e. the planning horizon over which it finds plans. This factored control structure is highly desirable because:
 * The costs of operating on N small plan databases is much less than the costs of operating on one big one.
 * It is usually easier to solve problems independently than to solve them all together. 
 * Plan failure in one reactor can (often) be locally resolved without impacting other reactors.
 * A working system can be built and tested incrementally.

= The Compositional Nature of a Teleo-Reactor =
The symmetry of inbound and outbound goals and observations enables natural composition of {\em reactors}. This is shown below with a 4 reactor configuration. The internal details of a reactor are irrelevant. Reactor _A_ is the top-level reactor. It can dispatch goals and observations to other reactors (i.e. reactors _B_ and _C_). It's goals originate outside the agent. Both _B_ and _C_ interact with _D_. Thus, the aggregate control structure is partitioned into a collection of reactors. Goals flow top down. Observations flow bottom up.

[http://trex-autonomy.googlecode.com/svn/wiki/images/composition.png]

= Timeline ownership to direct information flow unambiguosly =
T-REX defines an _ownership_ and _usage_ model of timelines to make the composition of reactors explicit, and the rules for information flow and conflict resolution unambiguous.  If a reactor _owns_ a timeline, it is solely responsible for deciding what value that timeline has as execution unfolds. Such timelines are _internal_ to that reactor. If a reactor _uses_ a timeline,  it will receive new values for that timeline as they arise, and it may dispatch any goals it has for that timeline to the owner reactor. Such a timeline is _external_ to its user. The user of a timeline _depends_ on it's owner. This dependency dictates the flow of information in T-REX. The key to scalability is that the scope of computation for each reactor is restricted to only the set of timelines it explicitly owns or uses, over the time horizon it cares to deliberate. This modularity, coupled with the dependency directed information flow, makes T-REX amenable to divide-and-conquer strategies to scale up to larger scale systems efficiently in a unified computational framework.

= An Illustrated Example =
We will now illustrate the compositional approach using [http://www.willowgarage.com/pages/robots/pr2-overview PR2], a sophisticated mobile manipulation platform designed for use in indoor environments. In June, 2009, a PR2 completed a [http://www.willowgarage.com/blog/2009/06/03/watch-milestone-2 challenging autonomy triathalon] involving navigation, opening doors, and plugging itself in to a standard electrical outlet. T-REX was used as the executive.

[http://trex-autonomy.googlecode.com/svn/wiki/images/reactorgraph.png]

The reactor graph is shown above. It depicts the set of reactors and dependencies between them. Each reactor and its dependent links are color-coded. Goals flow in the direction of these links. Observations flow in the reverse direction. Each reactor is annotated with a name, its {\em look-ahead} indicating how far ahead to plan, its {\em latency} giving an upper bound on plan completion time, and parameters {\em i} and {\em e} indicating the number of internal and external timelines respectively.

[http://trex-autonomy.googlecode.com/svn/wiki/images/master.png]

The above screen shot is from the [http://trex-autonomy.googlecode.com/svn/wiki/ExecutionMonitor Execution Monitor] which is used to observe T-REX state during execution. The panels on the left indicate the which reactor is in view. In this case, it is the * master *. The timelines contained withing the master reactor are also displayed. All times shown are _earliest start_ and _earliest end_. The _execution frontier_ is at tick _10_. In this case, the set of top-level goals are on the * m2_goals * timeline, which delegates to the *navigator* and *recharger*. Notice that the _recharger_ is in the active state.

[http://trex-autonomy.googlecode.com/svn/wiki/images/mechanism_control.png]

The above screen shot is for the * mechanism_control * reactor for the same tick (_10_). Note the correspondence between planned states for the various mechanism timelines and the activation states of the * switch_controllers * timeline. Each transition is achieved by execution of a * switch_controller * action.